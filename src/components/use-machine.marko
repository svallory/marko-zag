import type { MachineSrc, StateMachine as S } from "@zag-js/core";
import type { MachineOptions } from "../types";


export interface Input<TContext extends Record<string, any>, TState extends S.StateSchema, TEvent extends S.EventObject = S.AnyEventObject> {
  machine: MachineSrc<TContext, TState, TEvent>;
  options?: MachineOptions<TContext, TState, TEvent>;
}

<use-service/service machine=input.machine options=input.options/>

<let/machineState=service().getState()/>

<effect() {
  const unsubscribe = service().subscribe((nextState) => {
    machineState = nextState;
  });
  return () => {
    unsubscribe();
  };
}/>

<return=(
  [
    machineState,
    (event: S.Event<TEvent>) => service().send(event),
    service,
  ] as const
)/>
