import type { Machine, StateMachine as S } from "@zag-js/core";
import type { MachineOptions, State } from "../types";

export interface Input<TContext extends Record<string, any>, TState extends S.StateSchema, TEvent extends S.EventObject = S.AnyEventObject> {
  service: Machine<TContext, TState, TEvent>;
  options?: MachineOptions<TContext, TState, TEvent>;
}

<const/{ actions, context }=(input.options ?? {}) />

<let/machineState=input.service.getState() />

<effect() {
  const unsubscribe = input.service.subscribe((nextState) => {
    machineState = nextState;
  });
  return () => {
    unsubscribe();
  };
}/>

<lifecycle
  onMount() { 
    input.service.setContext(context);
    input.service.setOptions({ actions });
  }
/>

<return=(machineState as State<TContext, TState, TEvent>)/>
